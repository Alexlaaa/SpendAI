name: SpendAI

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/src/frontend
      - /src/frontend/node_modules
      - ./keys/backend_public.pem:/app/keys/backend_public.pem:ro # Mount Backend's Public Key
      - ./keys/frontend_private.pem:/app/keys/frontend_private.pem:ro # Mount Frontend's Private Key
    environment:
      - BACKEND_URL=http://backend:8080
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:8080
      - NEXT_PUBLIC_RECEIPT_SERVICE_URL=http://localhost:8081
    develop:
      watch:
        - path: ./frontend/package.json
          action: rebuild
        - path: ./frontend/next.config.js
          action: rebuild
        - path: ./frontend/package-lock.json
          action: rebuild
        - path: ./frontend
          target: /src/frontend
          action: sync
    command: npm start
    networks:
      - app-network

  atlas-seed:
    image: mongo:latest
    volumes:
      - ./backend/data-seed:/data
    command: >
      bash -c '
        set -e;
        echo "Waiting for Local Atlas Deployment (host.docker.internal:27018)...";
        # Wait until connection to the local Atlas deployment is successful
        until mongosh "mongodb://host.docker.internal:27017/spend_ai?directConnection=true" --eval "print(\"waited for connection\")"; do
          sleep 5;
        done;
        echo "Local Atlas Deployment is ready.";

        echo "Dropping existing database spend_ai and creating a new one...";
        # Use the URI directly with mongosh
        mongosh "mongodb://host.docker.internal:27017/spend_ai?directConnection=true" --eval "
          use spend_ai;
          db.dropDatabase();
          print(\"Database dropped and switched.\");
        "

        JSON_FILES=(
          "spend_ai.receipts.json"
          "spend_ai.receipt_embeddings.json"
          "spend_ai.users.json"
          "spend_ai.budgets.json"
          "spend_ai.goals.json"
          "spend_ai.messages.json"
          "spend_ai.conversations.json"
        )

        for file in "$${JSON_FILES[@]}"; do
          echo "Importing $$file...";
          collection=$$(echo "$$file" | sed "s/spend_ai\\.\(.*\)\.json/\\1/");
          # Use the URI directly with mongoimport, add --drop for clean import
          mongoimport --uri "mongodb://host.docker.internal:27017/spend_ai?directConnection=true" \
            --collection "$$collection" --file "/data/$$file" --jsonArray --drop;
        done;

        echo "Import completed.";
      '
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on: # Add dependency on the new seeding service
      - atlas-seed
    volumes:
      - ./backend:/src/backend # Sync the source code to /src/backend
      - /src/backend/node_modules # Prevent node_modules from being overwritten
      - ./keys/backend_private.pem:/app/keys/backend_private.pem:ro # Mount Backend's Private Key
      - ./keys/frontend_public.pem:/app/keys/frontend_public.pem:ro # Mount Frontend's Public Key

    environment:
      - PORT=8080
      - APP_NAME=backend
      - ENVIRONMENT=development
      - MONGODB_URI=mongodb://host.docker.internal:27017/?directConnection=true
      - JWT_SECRET=61d4c914418d42a14701d76e9c76acdf1fa86d4eaa24a2df7bb9ccb2460a0934fb0a560b6410911b5d9f89ceb7037ade7f24a991c472e85ae7f0105e899b9595
    env_file:
      - .env
    networks:
      - app-network

  receipt-service:
    build:
      context: ./microservices/receipt-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - backend
    volumes:
      - ./microservices/receipt-service:/src/receipt-service
    environment:
      - FLASK_ENV=development
      - MONGODB_URI=mongodb://host.docker.internal:27017/?directConnection=true
      - EMBEDDING_MODEL_NAME=all-MiniLM-L6-v2
      - VECTOR_INDEX_NAME=vector_index # Ensure this index exists in MongoDB Atlas/local setup
      - EMBEDDINGS_COLLECTION=receipt_embeddings
      - DATABASE_NAME=spend_ai
    develop:
      watch:
        - path: ./microservices/receipt-service
          target: /app
          action: sync
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
